#1 Intro To Tutorial Challenges

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the introTutorial function below.
def introTutorial(V, arr):
    return arr.index(V)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    V = int(input())

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = introTutorial(V, arr)

    fptr.write(str(result) + '\n')

    fptr.close()

------------------------------
#2 Insertion Sort - Part 1

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort1 function below.
def insertionSort1(n, arr):
    c = arr[n-1]
    for i in range(n):
        if arr[n-i-2] > c and arr.index(arr[i])!= n-1:
            arr.remove(arr[n-i-1])
            arr.insert(n-i-1, arr[n-i-2])
            print (*arr)
        else:
            arr[n-i-1] = c
            print (*arr)
            break        
            
if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)

------------------------------
#3 Insertion Sort - Part 2 

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort2 function below.
def insertionSort2(n, arr):
    for i in range(n):
        if (i==0): 
            continue
        for j in range(0,i):
            if arr[j]>arr[i]:
                temp = arr[j]
                arr[j] = arr[i]
                arr[i] = temp
        print (*arr)         
    
if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)

------------------------------
#4 Correctness and the Loop Invariant


def insertion_sort(l):
    for i in range(1, len(l)):
        j = i
        key = l[i]
        while (j > 0) and (l[j-1] > key):
           l[j] = l[j-1]
           j -= 1
        l[j] = key

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

------------------------------
#5 Running Time of Algorithms

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the runningTime function below.
def runningTime(arr):
    z=0
    for i in range(1,len(arr)):
        x=arr[i]
        for j in range(i):
            if arr[j]>x:
                (arr[i],arr[j])=(arr[j],arr[i])
                z+=1
        
    return z

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()

------------------------------
#6 Quicksort 1 - Partition

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the quickSort function below.
def quickSort(arr):
    for i in range(1, len(arr)):
        for j in range(0,i):
            if arr[j] > arr[i]:
                arr[j],arr[i]=arr[i],arr[j]
    return arr
        
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

------------------------------
#7 Counting Sort 1

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countingSort function below.
def countingSort(arr):
    c =[]
    l=[0] * 100
    for i in arr:
        l[i] +=1
    return l

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

------------------------------
#8 Counting Sort 2

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countingSort function below.
def countingSort(arr):
    a = sorted(arr)
    return a

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

------------------------------
#9 Closest Numbers

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the closestNumbers function below.
def closestNumbers(arr):
    l=[]
    arr.sort()
    n=arr[1]-arr[0]
    for i in range(1,len(arr)):
        if arr[i]-arr[i-1]<n:
            l.clear()
            l.append(arr[i-1])
            l.append(arr[i])
            n=arr[i]-arr[i-1]
        elif arr[i]-arr[i-1]==n:
            l.append(arr[i-1])
            l.append(arr[i])
    return l
            
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = closestNumbers(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()

------------------------------
#10 Find the Median

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the findMedian function below.
def findMedian(arr):
    a = sorted(arr)
    for i in range(len(arr)):
        if i == int((len(arr)/2) - 0.5):
            return a[i]
        
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = findMedian(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
'[=]'

------------------------------
